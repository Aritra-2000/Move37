// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id        Int          @id @default(autoincrement())
  name      String
  email     String       @unique
  password  String
  avatar    String?
  role      UserRole     @default(USER)
  polls     Poll[]       @relation("creator_polls")
  votes     Vote[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  @@map("users")
}


model Poll {
  id             Int          @id @default(autoincrement())
  question       String
  isPublished    Boolean      @default(false)
  creator        User         @relation(fields: [creatorId], references: [id], name: "creator_polls")
  creatorId      Int
  options        PollOption[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}


model PollOption {
  id        Int      @id @default(autoincrement())
  text      String
  order     Int      @default(0)
  poll      Poll     @relation(fields: [pollId], references: [id])
  votes     Vote[]
  pollId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id           Int        @id @default(autoincrement())
  userId       Int
  pollOptionId Int
  user         User       @relation(fields: [userId], references: [id])
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([userId, pollOptionId], name: "unique_user_option")
}